//
// Copyright (c) 2024, Conserve It Pty. Ltd.
//

package tasks;

import org.example.Day21;
import org.example.utils.*;
import org.junit.jupiter.api.*;
import utils.FileUtils;

import java.util.*;

public class Day21Test
{
  private static final StringInput TEST_INPUT_1 = new StringInput("""
029A
980A
179A
456A
379A
    """.trim());

  @Test
  public void testSegmentedPath1()
  {
    Day21.SegmentedPath path = new Day21.SegmentedPath(">^>A>A");
    Assertions.assertEquals(path.getAllCharacters(), List.of('>', '^', '>', 'A', '>', 'A'));
    Assertions.assertEquals(path.getSegments().size(), 2);
    Assertions.assertEquals(path.getSegments().get(0).buttonPresses, List.of('>', '^', '>', 'A'));
    Assertions.assertEquals(path.getSegments().get(1).buttonPresses, List.of('>', 'A'));
  }

  @Test
  public void testSegmentedPath2()
  {
    Day21.SegmentedPath path = new Day21.SegmentedPath(">>^A>A");
    var expandedPaths = path.expand(new Day21.DirectionalKeypad());
    Assertions.assertEquals(expandedPaths.size(), 2);

    for (Day21.SegmentedPath expandedPath : expandedPaths)
    {
      System.out.println(expandedPath);
    }

    Assertions.assertTrue(expandedPaths.contains(new Day21.SegmentedPath("vAA<^A>AvA^A")));
    Assertions.assertTrue(expandedPaths.contains(new Day21.SegmentedPath("vAA^<A>AvA^A")));
  }

  @Test
  public void testPathLengthMapping()
  {
    Day21.DirectionalKeypad keypad = new Day21.DirectionalKeypad();
    var lengthCache = Day21.mapPathsToExpandedPathLength(keypad, 4);

    var path = new Day21.PathSegment(List.of('v', 'A'));
    //Results generated by manually checking path expansions in `testPathLengthCache()`
    Assertions.assertEquals(2, lengthCache.get(new Pair<>(path, 0)));
    Assertions.assertEquals(6, lengthCache.get(new Pair<>(path, 1)));
    Assertions.assertEquals(16, lengthCache.get(new Pair<>(path, 2)));
    Assertions.assertEquals(40, lengthCache.get(new Pair<>(path, 3)));
    Assertions.assertEquals(102, lengthCache.get(new Pair<>(path, 4)));
  }

  //Utility to manually check segmented path expansion for debugging
  @Test
  public void testPathLengthCache()
  {
    Day21.DirectionalKeypad keypad = new Day21.DirectionalKeypad();
    List<Day21.SegmentedPath> paths = List.of(new Day21.SegmentedPath("vA"));

    for(int i = 0; i < 4; i++)
    {
      for (Day21.SegmentedPath path : paths)
      {
        System.out.println(nIndents(i) + path + " [" + path.getAllCharacters().size() + "]");
      }

      paths = paths.stream()
        .flatMap(path -> path.expand(keypad).stream())
        .toList();
    }

  }

  private static String nIndents(int n)
  {
    StringBuilder builder = new StringBuilder();
    for(int i = 0; i < n; i++)
    {
      builder.append('\t');
    }
    return builder.toString();
  }

  @Test
  public void task1Test()
  {
    Assertions.assertEquals(126384L, Day21.task2(TEST_INPUT_1, 2));
  }

  @Test
  public void task1()
  {
    StringInput input = FileUtils.getFileContents("/day21_task.txt");
    Assertions.assertEquals(188398L, Day21.task2(input, 2));
  }

  @Test
  public void task2()
  {
    StringInput input = FileUtils.getFileContents("/day21_task.txt");
    Assertions.assertEquals(230049027535970L, Day21.task2(input, 25));
  }
}
